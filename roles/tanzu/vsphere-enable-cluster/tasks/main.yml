---
- name: Disable fluentbit on vCenter server
  community.vmware.vmware_vm_shell:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    datacenter: "{{ hosting_vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-vcenter"
    vm_username: "root"
    vm_password: "{{ nested_vcenter.password }}"
    vm_shell: /bin/bash
    vm_shell_args: |-
      -c "sed -i 's/fluentbit_enabled: true/fluentbit_enabled: false/' /etc/vmware/wcp/wcpsvc.yaml"
    vm_shell_cwd: "/root"
  when: "tanzu_vsphere.fluentbit_enabled is defined and not tanzu_vsphere.fluentbit_enabled"

- name: Set Supervisor disk mode
  community.vmware.vmware_vm_shell:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    datacenter: "{{ hosting_vcenter.datacenter }}"
    validate_certs: false
    vm_id: "{{ environment_tag }}-vcenter"
    vm_username: "root"
    vm_password: "{{ nested_vcenter.password }}"
    vm_shell: /bin/bash
    vm_shell_args: |-
      -c "sed -i 's/controlplane_vm_disk_provisioning: \"thick\"/controlplane_vm_disk_provisioning: \"thin\"/' /etc/vmware/wcp/wcpsvc.yaml"
    vm_shell_cwd: "/root"
  when: "tanzu_vsphere.supervisor_thin_disk_mode is defined and not tanzu_vsphere.supervisor_thin_disk_mode"

- name: Extract haproxy VM extra config
  community.vmware.vmware_guest_info:
    hostname: "{{ nested_vcenter.ip }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    validate_certs: false
    datacenter: "{{ nested_vcenter.datacenter }}"
    name: tkg-haproxy
    properties:
      - config.extraConfig
    schema: vsphere
  delegate_to: localhost
  register: vminfo
  when: "tkg_haproxy is defined"

- name: Extract certificate from haproxy output
  set_fact:
    haproxy_ca_cert_raw: >-
      {
      {% for item in vminfo.instance.config.extraConfig %}
      {% if item.key == "guestinfo.dataplaneapi.cacert" %}
      "public_key": "{{ item.value }}",
      {% endif %}
      {% endfor %}
      }
  when: "tkg_haproxy is defined"

- name: Decode haproxy CA Cert
  set_fact:
    haproxy_ca_cert: "{{ haproxy_ca_cert_raw.public_key | b64decode }}"
  when: "tkg_haproxy is defined"

- name: Get a cert from NSX ALB Controller
  get_certificate:
    host: "{{ tanzu_vsphere.vds_networking.nsx_alb_server }}"
    port: 443
  delegate_to: localhost
  run_once: true
  register: nsx_alb_cert
  when: "tanzu_vsphere.vds_networking.nsx_alb_server is defined"

- debug: var=tanzu_vsphere

- debug: var=nsx_alb_cert

- name: Create vsphere namespace cluster
  vmware.ansible_for_vsphere_with_tanzu.vsphere_tanzu_cluster_manage:
    hostname: "{{ nested_vcenter.ip }}"
    username: "{{ nested_vcenter.username }}"
    password: "{{ nested_vcenter.password }}"
    validate_certs: false
    cluster_distributed_switch: "{{ tanzu_vsphere.nsxt.cluster_distributed_switch | default(omit) }}"
    cluster_name: "{{ tanzu_vsphere.vsphere_cluster }}"
    default_content_library: "{{ tanzu_vsphere.default_content_library }}"
    dns_search_domains: "{{ dns_domain }}"
    egress_cidrs: "{{ tanzu_vsphere.nsxt.egress_cidrs | default(omit) }}"
    ephemeral_storage_policy: "{{ tanzu_vsphere.ephemeral_storage_policy }}"
    haproxy_ip_range_list: "{{ tanzu_vsphere.vds_networking.haproxy_ip_range_list | default(omit) }}"
    haproxy_ca_chain: "{{ haproxy_ca_cert | default(omit) }}"
    haproxy_management_ip: "{{ tkg_haproxy.management_ip | default(omit) }}"
    haproxy_management_port: "{{ tanzu_vsphere.vds_networking.haproxy.management_port | default(omit) }}"
    haproxy_password: "{{ tkg_haproxy.password | default(omit) }}"
    haproxy_username: "{{ tkg_haproxy.username | default(omit) }}"
    image_storage_policy: "{{ tanzu_vsphere.image_storage_policy }}"
    ingress_cidrs: "{{ tanzu_vsphere.nsxt.ingress_cidrs | default(omit) }}"
    load_balancer_provider: "{{ tanzu_vsphere.vds_networking.load_balancer_provider | default(omit) }}"
    management_address_count: "{{ tanzu_vsphere.management_address_count | default(5) }}"
    management_dns_servers: "{{ tanzu_vsphere.management_dns_servers }}"
    management_gateway: "{{ tanzu_vsphere.management_gateway }}"
    management_starting_address: "{{ tanzu_vsphere.management_starting_address }}"
    management_netmask: "{{ tanzu_vsphere.management_netmask }}"
    management_ntp_servers: "{{ tanzu_vsphere.ntp_server_list }}"
    management_port_group: "{{ tanzu_vsphere.management_port_group }}"
    master_storage_policy: "{{ tanzu_vsphere.master_storage_policy }}"
    network_provider: "{{ tanzu_vsphere.network_provider }}"
    nsx_alb_ca_chain: "{{ nsx_alb_cert.cert | default(omit) }}"
    nsx_alb_password: "{{ tanzu_vsphere.vds_networking.nsx_alb_password | default(omit) }}"
    nsx_alb_username: "{{ tanzu_vsphere.vds_networking.nsx_alb_username | default(omit) }}"
    nsx_alb_server: "{{ tanzu_vsphere.vds_networking.nsx_alb_server | default(omit)  }}"
    nsx_edge_cluster: "{{ tanzu_vsphere.nsxt.nsx_edge_cluster | default(omit) }}"
    pod_cidrs: "{{ tanzu_vsphere.nsxt.pod_cidrs | default(omit) }}"
    workload_dns_servers: "{{ tanzu_vsphere.workload_dns_servers }}"
    workload_gateway: "{{ tanzu_vsphere.vds_networking.workload_gateway | default(omit) }}"
    workload_ip_range_list: "{{ tanzu_vsphere.vds_networking.workload_ip_range_list | default(omit) }}"
    workload_netmask: "{{ tanzu_vsphere.vds_networking.workload_netmask | default(omit) }}"
    workload_ntp_servers: "{{ tanzu_vsphere.ntp_server_list }}"
    workload_portgroup: "{{ tanzu_vsphere.vds_networking.workload_port_group | default(omit) }}"
    services_cidr: "{{ tanzu_vsphere.services_cidr }}"
    supervisor_size: "{{ tanzu_vsphere.supervisor_size | upper }}"
    state: present
  async: 3600
  poll: 0
  register: cluster_results

- name: Check on enable namespace job
  async_status:
    jid: "{{ cluster_results.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 720
  delay: 5

---
-   name: Configure nested_hosts
    hosts: localhost
    gather_facts: False
    vars:
        # empty var to populate
        datastores_to_add:

    tasks:
    -   name: Create Datacenter
        vmware_datacenter:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            datacenter_name: "{{ nested_vcenter.datacenter }}"
            state: present
            validate_certs: False
        
    -   name: Create Clusters
        vmware_cluster:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            datacenter_name: "{{ nested_vcenter.datacenter }}"
            cluster_name: "{{ item.key }}"
            validate_certs: False
            enable_ha: False
            enable_drs: True
            enable_vsan: False
        with_dict: "{{ nested_clusters }}"
    
    -   name: Add ESXi Host to VCSA
        vmware_host:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            datacenter_name: "{{ nested_vcenter.datacenter }}"
            validate_certs: false
            cluster_name: "{{ item.value.nested_cluster }}"
            esxi_hostname: "{{ item.value.ip }}"
            esxi_username: "root"
            esxi_password: "{{ nested_host_password }}"
            state: present
        with_dict: "{{ nested_hosts }}"

    # Removing default VM port group because there is a space in the name, which isn't useful
    -   name: Remove Default VM Portgroup
        vmware_portgroup:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: False
            cluster_name: "{{ item.key }}"
            switch_name: vSwitch0
            portgroup_name: "VM Network"
            state: absent
        delegate_to: localhost
        with_dict: "{{ nested_clusters }}"
        when: '"vswitch0_vm_port_group_name" in item and "vswitch0_vm_port_group_vlan" in item '

    -   name: Add VM Portgroup to vSwitch 0
        vmware_portgroup:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: False
            cluster_name: "{{item.key}}"
            switch_name: vSwitch0
            portgroup_name: "{{ item.value.vswitch0_vm_port_group_name }}"
            vlan_id: "{{ item.value.vswitch0_vm_port_group_vlan }}"
        delegate_to: localhost
        with_dict: "{{ nested_clusters }}"
        when: '"vswitch0_vm_port_group_name" in item and "vswitch0_vm_port_group_vlan" in item '


    -   name: Gather info about disk of all ESXi Host in the given Cluster
        vmware_host_disk_info:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: false
            cluster_name: "{{item.key}}"
        delegate_to: localhost
        register: cluster_host_disks
        with_dict: "{{ nested_clusters }}"
    
    -   debug: msg="{{cluster_host_disks}}"

    -   name: Build device lookup table
        set_fact: 
            host_disk_map: >-
                {
                {% for cluster in cluster_host_disks.results %}
                {% for host_name, disks in cluster.hosts_disk_facts.items() %}
                {% for disk in disks %}
                "{{cluster.invocation.module_args.cluster_name}}_{{host_name}}_{{disk.device_ctd_list[0]}}": 
                    "{{disk.canonical_name}}",
                {% endfor %}
                {% endfor %}
                {% endfor %}
                }

    -   debug: msg="{{host_disk_map}}"

    # Build a list of each datastore to add to each host
    -   name: Build datastores to add
        set_fact: 
            datastores_to_add: >-
                [
                {% for nested_host_name, nested_host_spec in nested_hosts.items() %}
                {% if "nested_hosts_disks" in  nested_clusters[nested_host_spec.nested_cluster] %}
                {% for disk in nested_clusters[nested_host_spec.nested_cluster].nested_hosts_disks  %}
                {% if "datastore_name" in  disk %}
                {
                    "host_name": "{{ nested_host_spec.ip }}",
                    "datastore_name": "{{disk.datastore_name}}-{{ nested_host_name }}",
                    "disk_reference" : "{{ nested_host_spec.nested_cluster }}_{{ nested_host_spec.ip }}_vmhba0:C0:T{{ loop.index0 + 1 }}:L0",
                },
                {% endif %}
                {% endfor %}
                {% endif %}
                {% endfor %}
                ]

    -   name: Mount VMFS datastores to ESXi
        vmware_host_datastore:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: False
            datastore_name: "{{ item.datastore_name }}"
            datastore_type: "vmfs"
            vmfs_device_name: "{{host_disk_map[item.disk_reference]}}"
            vmfs_version: 6
            esxi_hostname: "{{ item.host_name }}"
            state: present
        delegate_to: localhost
        with_items: "{{ datastores_to_add }}"

    -   name: Update Clusters to enable HA
        vmware_cluster:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            datacenter_name: "{{ nested_vcenter.datacenter }}"
            cluster_name: "{{ item.key }}"
            validate_certs: False
            enable_ha: "{{ item.value.ha_enabled }}" 
            ha_admission_control_enabled: "{{ item.value.ha_admission_control_enabled | default(omit)}}" 
            ha_host_monitoring: "{{ item.value.ha_host_monitoring_enabled | default(omit)}}" 
            enable_drs: "{{ item.value.drs }}"
            enable_vsan: False
        with_dict: "{{ nested_clusters }}"
        when: '"enable_ha" in item'

    # Build a list of resource pools to add and ignore cluster if none specified
    -   name: Build resource pools to add
        set_fact: 
            resource_pools_to_add: >-
                [
                {% for cluster_name, cluster_spec in nested_clusters.items()  %}
                {% if "resource_pools" in  cluster_spec %}
                {% for resource_pool in cluster_spec.resource_pools  %}
                {
                "cluster_name": "{{ cluster_name }}",
                "resource_pool": "{{ resource_pool }}",
                },
                {% endfor %}
                {% endif %}
                {% endfor %}
                ]

    -   name: Add resource pool to vCenter
        vmware_resource_pool:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: False
            datacenter: "{{ nested_vcenter.datacenter }}"
            cluster: "{{ item.cluster_name }}"
            resource_pool: "{{ item.resource_pool }}"
            state: present
        with_items: "{{ resource_pools_to_add }}"
        delegate_to: localhost

    -   name: Create VDS
        vmware_dvswitch:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: false
            datacenter: "{{ nested_vcenter.datacenter }}"
            switch: "{{ item.vds_name }}"
            version: 7.0.0
            mtu: "{{ item.mtu }}"
            uplink_quantity: "{{ item.uplink_quantity }}"
            state: present
        with_items: "{{ distributed_switches }}"
        delegate_to: localhost
        when: 'distributed_switches is defined'
        
    # Build of host to vds mapping buy using the nest_cluster field in the host spec
    -   name: Build list of hosts to add to each vds
        set_fact: 
            host_vds_binding: >-
                [
                {% for distributed_switch in distributed_switches %}
                {% for cluster_mapping in distributed_switch.clusters %}
                {% for host_spec in nested_hosts.values() %}
                {% if cluster_mapping ==  host_spec.nested_cluster %}
                {
                    "vds_name": "{{ distributed_switch.vds_name }}",
                    "esxi_hostname": "{{ host_spec.ip }}",
                    "vmnics": "{{ distributed_switch.vmnics }}",
                },
                {% endif %}
                {% endfor %}
                {% endfor %}
                {% endfor %}
                ]
        when: 'distributed_switches is defined'

    -   name: Add Host to dVS
        vmware_dvs_host:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: false
            esxi_hostname: "{{ item.esxi_hostname }}"
            switch_name: "{{ item.vds_name }}"
            vmnics: "{{ item.vmnics }}"
            state: present
        with_items: "{{ host_vds_binding }}" 
        delegate_to: localhost
        when: 'distributed_switches is defined'

    -   name: Create vlan portgroup
        vmware_dvs_portgroup:
            hostname: "{{ nested_vcenter.ip }}"
            username: "{{ nested_vcenter.user }}"
            password: "{{ nested_vcenter.password }}"
            validate_certs: false
            portgroup_name: "{{ item.1.portgroup_name }}"
            switch_name: "{{ item.0.vds_name }}"
            vlan_id: "{{ item.1.vlan_id }}"
            num_ports: 8
            portgroup_type: earlyBinding
            state: present
        with_subelements: 
            -   "{{ distributed_switches }}"
            -   distributed_port_groups
        delegate_to: localhost
        when: 'distributed_switches is defined'
       